{"version":3,"sources":["components/ArtistPage/ArtistPage.module.scss","components/Header/Header.module.scss","components/SearchTracksList/SearchTracksList.module.scss","components/Card/Card.module.scss","components/TopTracksList/TopTracksList.module.scss","API/API.ts","store/artistPageReducer.ts","components/ArtistPage/ArtistPage.tsx","secondaryFunction.ts","components/Header/Header.tsx","store/searchTracksListReducer.ts","components/Card/Card.tsx","components/SearchTracksList/SearchTracksList.tsx","store/topTracksListReducer.ts","components/TopTracksList/TopTracksList.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","params","api_key","format","API","getTopTracks","get","method","then","response","data","tracks","track","getMoreTopTracks","next","page","getSearchTracks","search","limit","results","trackmatches","getMoreSearchTracks","console","log","getArtistInfo","artistName","artist","initialState","errorMessage","isLoading","artistPageReducer","state","action","type","payload","changeIsLoading","ArtistPage","text","dispatch","useDispatch","useSelector","artistPage","history","useHistory","useParams","useEffect","a","hasOwnProperty","message","location","className","s","error","to","ArtistPage__name","name","float","image","src","alt","bio","dangerouslySetInnerHTML","__html","content","replace","tags","tag","length","ArtistPage__tags","title","map","memo","Header","searchSubmit","searchTracksList","cn","Header__btn","active","searchValue","nextPage","searchTracksListReducer","setSearch","Card","img","Card__name","Card__artist","SearchTracksList","topTracks","nexPageTopTracks","requestSearchTracks","window","addEventListener","showMoreSearchTracks","removeEventListener","useCallback","pageYOffset","document","documentElement","scrollHeight","clientHeight","requestMoreSearchTracks","searchLink","e","preventDefault","push","fixed","SearchForm","onSubmit","onChange","target","value","placeholder","TracksNotFound","List","id","topTracksListReducer","TopTracksList","topTracksList","nexPageTopTracksList","showMoreTopTracks","Main","Search","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9484e04e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"ArtistPage_error__1L2A-\",\"ArtistPage\":\"ArtistPage_ArtistPage__1njlL\",\"ArtistPage__name\":\"ArtistPage_ArtistPage__name__2IsVo\",\"ArtistPage__tags\":\"ArtistPage_ArtistPage__tags__wuAwl\",\"title\":\"ArtistPage_title__2oGf6\",\"name\":\"ArtistPage_name__1qJWH\",\"float\":\"ArtistPage_float__3XKyf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3AZlE\",\"Header__btn\":\"Header_Header__btn__p6B89\",\"active\":\"Header_active__DwwKD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fixed\":\"SearchTracksList_fixed__cY__z\",\"SearchForm\":\"SearchTracksList_SearchForm__18ab6\",\"TracksNotFound\":\"SearchTracksList_TracksNotFound__1rBj8\",\"List\":\"SearchTracksList_List__pqzVj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__4l0Kf\",\"Card__name\":\"Card_Card__name__1bdGy\",\"Card__artist\":\"Card_Card__artist__220wu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"TopTracksList_List__YZ4Bi\"};","import axios from 'axios';\r\nimport { artistInfoType, searchTracksType, topTracksType } from '../types/types';\r\n\r\nconst apiKey: string = '78fafa6218217a14aaada8308dd63c3b'\r\n\r\nconst instance = axios.create({\r\n    baseURL: `http://ws.audioscrobbler.com/2.0/`,\r\n    params: {\r\n        api_key: apiKey,\r\n        format: 'json',\r\n    }\r\n})\r\n\r\n// API HAS BROKEN PAGINATION (IT SHOWS A TOTAL PAGES = 500 000, BUT REQUEST ON 300+ PAGE SHOWS EMPTY ARRAY OF TRACKS)\r\n\r\nconst API = {\r\n    //Top Tracks List\r\n    getTopTracks() {\r\n        return instance.get<topTracksType>('', {params: {\r\n            method: 'chart.gettoptracks'\r\n        }})\r\n            .then(response => response.data.tracks.track) // return array of tracks\r\n    },\r\n    getMoreTopTracks(next: number) {\r\n        return instance.get<topTracksType>('', {params: {\r\n            method: 'chart.gettoptracks',\r\n            page: next\r\n        }})\r\n            .then(response => response.data.tracks.track) // return array of tracks\r\n    },\r\n\r\n    // Search Tracks List\r\n    getSearchTracks(search: string) {\r\n        return instance.get<searchTracksType>('', {params: {\r\n            method: 'track.search',\r\n            limit: 50,\r\n            track: search\r\n        }})\r\n            .then(response => response.data.results.trackmatches.track) // return array of tracks\r\n    },\r\n    getMoreSearchTracks(search: string, next: number) {\r\n        console.log('getMoreSearchTracks', search, next)\r\n        return instance.get<searchTracksType>('', {params: {\r\n            method: 'track.search',\r\n            limit: 50,\r\n            track: search,\r\n            page: next\r\n        }})\r\n            .then(response => response.data.results.trackmatches.track) // return array of tracks\r\n    },\r\n\r\n    // ArtistPage\r\n    getArtistInfo(artistName: string) {\r\n        return instance.get<artistInfoType>('', {params: {\r\n            method: 'artist.getinfo',\r\n            artist: artistName,\r\n        }})\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\nexport default API;","import { ThunkAction } from 'redux-thunk';\r\nimport { artist, artistInfoType } from '../types/types';\r\nimport API from './../API/API';\r\nimport { RootState } from './store';\r\n\r\nconst initialState = {\r\n    artist: {} as artist,\r\n    errorMessage: null as null | string,\r\n    isLoading: false,\r\n};\r\n\r\ntype stateType = typeof initialState\r\ntype actionsTypes = ReturnType<typeof setArtistInfo> | ReturnType<typeof changeIsLoading> | ReturnType<typeof setErrorMessage>\r\nconst artistPageReducer = (state = initialState, action: actionsTypes): stateType => {\r\n    switch (action.type) {\r\n        case 'artistInfo/SET_ARTIST_INFO':\r\n            return {\r\n                ...state,\r\n                errorMessage: null,\r\n                artist: action.payload as artist\r\n            };\r\n        case 'artistInfo/CHANGE_IS_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n        case 'artistInfo/SET_ERROR_MESSAGE':\r\n            return {\r\n                ...state,\r\n                artist: {} as artist,\r\n                errorMessage: action.errorMessage\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default artistPageReducer;\r\nconst setArtistInfo = (data: artistInfoType) => ({ type: 'artistInfo/SET_ARTIST_INFO', payload: data.artist} as const);\r\nconst changeIsLoading = (isLoading: boolean) => ({ type: 'artistInfo/CHANGE_IS_LOADING', isLoading } as const);\r\nconst setErrorMessage = (errorMessage: string) => ({ type: 'artistInfo/SET_ERROR_MESSAGE', errorMessage } as const);\r\n\r\n\r\nexport const requestArtistInfo = (artistName: string): ThunkAction<void, RootState, unknown, actionsTypes> => {\r\n    return async (dispatch) => {\r\n        dispatch(changeIsLoading(true))\r\n        let response = await API.getArtistInfo(artistName);\r\n            if (response.hasOwnProperty('artist')) { // we can get artist or error-message\r\n                dispatch(setArtistInfo(response))\r\n            } else {\r\n                dispatch(setErrorMessage(response.message as string))\r\n            }\r\n            dispatch(changeIsLoading(false))\r\n    }\r\n};","import React, { memo, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink, useHistory, useParams } from 'react-router-dom';\r\nimport { cutText } from '../../secondaryFunction';\r\nimport { requestArtistInfo } from '../../store/artistPageReducer';\r\nimport { RootState } from '../../store/store';\r\nimport s from './ArtistPage.module.scss'\r\n\r\nconst ArtistPage: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    let artist = useSelector((state: RootState) => state.artistPage.artist)\r\n    let errorMessage = useSelector((state: RootState) => state.artistPage.errorMessage)\r\n    let history = useHistory()\r\n    let params = useParams<{ artistName?: string }>()\r\n\r\n    useEffect(() => { // if url '/artist/...' changes\r\n        if (params.artistName) {\r\n            dispatch(requestArtistInfo(params.artistName))\r\n        }\r\n    }, [params.artistName, history.location])\r\n\r\n    // we can get artist or error-message\r\n\r\n    if (errorMessage) {\r\n        return (\r\n            <div className={s.error}>\r\n                <span>\r\n                    {errorMessage}\r\n                </span>\r\n                <NavLink to='/'>\r\n                    To Main Page\r\n                </NavLink>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n\r\n            <div className={s.ArtistPage}>\r\n                <div className={s.ArtistPage__name}>\r\n                    {artist.name}\r\n                </div>\r\n\r\n                <div className={s.float}>\r\n                    {artist.image &&\r\n                        <img src={artist.image[3]['#text']} alt=\"\" />\r\n                    }\r\n\r\n                    {artist.bio && <div dangerouslySetInnerHTML={{ __html: cutText(artist.bio.content) }} />}\r\n                </div>\r\n\r\n                {artist.tags && artist.tags.tag.length > 0 &&\r\n                    <div className={s.ArtistPage__tags}>\r\n                        <div className={s.title}>\r\n                            TAGS:\r\n                            </div>\r\n\r\n                        {artist.tags.tag.map(tag =>\r\n                            <div className={s.name} key={tag.name}>\r\n                                {tag.name}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default memo(ArtistPage);","export const cutText = (text: string): string => {\r\n    return text.replace(/User-contributed text is available under the Creative Commons By-SA License; additional terms may apply\\./i, \"\")\r\n}","import React, { memo } from 'react';\r\nimport { NavLink, useParams } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/store';\r\nimport cn from 'classnames'\r\nimport s from './Header.module.scss'\r\n\r\n\r\nconst Header: React.FC = () => {\r\n    let params = useParams<{ searchValue?: string }>()\r\n    let searchSubmit = useSelector((state: RootState) => state.searchTracksList.searchSubmit)\r\n\r\n    return (\r\n        <div className={s.Header}>\r\n            <NavLink className={cn(s.Header__btn, {[s.active]: !params.hasOwnProperty('searchValue')})} to='/'>\r\n                <span>\r\n                    Popular Tracks\r\n                </span>\r\n            </NavLink>\r\n\r\n            <NavLink className={cn(s.Header__btn, {[s.active]: params.hasOwnProperty('searchValue')})} to={`/search/${searchSubmit}`}>\r\n                <span>\r\n                    Search Tracks\r\n                </span>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Header);","import { ThunkAction } from 'redux-thunk';\r\nimport { searchTrackType } from '../types/types';\r\nimport API from './../API/API';\r\nimport { RootState } from './store';\r\n\r\nconst initialState = {\r\n    searchSubmit: '', // for addMoreSearchTracks, because searchValue always update\r\n    searchValue: '', \r\n    tracks: [] as searchTrackType[],\r\n    nextPage: 1,\r\n    isLoading: false\r\n};\r\n\r\ntype stateType = typeof initialState\r\ntype actionsTypes = ReturnType<typeof setSearchTracks> | ReturnType<typeof changeIsLoading> | ReturnType<typeof setSearch> | ReturnType<typeof addMoreSearchTracks>\r\n\r\nconst searchTracksListReducer = (state = initialState, action: actionsTypes): stateType => {\r\n    switch (action.type) {\r\n        case 'searchTracksList/SET_SEARCH_TRACKS':\r\n            return {\r\n                ...state,\r\n                tracks: action.payload,\r\n                nextPage: action.payload.length > 0 ? ++state.nextPage : 1,\r\n                searchSubmit:  action.searchSubmit\r\n            };\r\n        case 'topTracksList/ADD_MORE_SEARCH_TRACKS':\r\n            return {\r\n                ...state,\r\n                tracks: [...state.tracks, ...action.payload],\r\n                nextPage: action.payload.length > 0 ? ++state.nextPage : 1\r\n            };\r\n        case 'searchTracksList/CHANGE_IS_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            };\r\n        case 'searchTracksList/SET_SEARCH':\r\n            return {\r\n                ...state,\r\n                searchValue: action.searchValue\r\n            };\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default searchTracksListReducer;\r\nconst setSearchTracks = (data: searchTrackType[],  searchSubmit: string) => ({ type: 'searchTracksList/SET_SEARCH_TRACKS', payload: data,  searchSubmit } as const);\r\nconst addMoreSearchTracks = (data: searchTrackType[]) => ({ type: 'topTracksList/ADD_MORE_SEARCH_TRACKS', payload: data } as const);\r\nconst changeIsLoading = (isLoading: boolean) => ({ type: 'searchTracksList/CHANGE_IS_LOADING', isLoading } as const);\r\nexport const setSearch = (searchValue: string) => ({ type: 'searchTracksList/SET_SEARCH', searchValue } as const);\r\n\r\n\r\nexport const requestSearchTracks = (searchValue: string): ThunkAction<void, RootState, unknown, actionsTypes> => {\r\n    return async (dispatch) => {\r\n        dispatch(changeIsLoading(true))\r\n        let response = await API.getSearchTracks(searchValue);\r\n            dispatch(setSearchTracks(response, searchValue))\r\n            dispatch(changeIsLoading(false))\r\n    }\r\n};\r\n\r\nexport const requestMoreSearchTracks = (searchSubmit: string, next: number): ThunkAction<void, RootState, unknown, actionsTypes> => {\r\n    return async (dispatch) => {\r\n        dispatch(changeIsLoading(true))\r\n        let response = await API.getMoreSearchTracks(searchSubmit, next);\r\n            dispatch(addMoreSearchTracks(response))\r\n            dispatch(changeIsLoading(false))\r\n    }\r\n};","import React, { memo } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Card.module.scss'\r\n\r\n\r\ninterface propsType {\r\n    img?: string\r\n    name: string\r\n    artistName: string\r\n}\r\n\r\nconst Card: React.FC<propsType> = ({ img, name, artistName }) => {\r\n\r\n    return (\r\n        <div className={s.Card}>\r\n            {img && \r\n                <img src={img} alt=\"\"/>}\r\n            <div>\r\n                <div className={s.Card__name}>\r\n                    {name}\r\n                </div>\r\n\r\n                <NavLink className={s.Card__artist} to={`/artist/${artistName}`}>\r\n                    {artistName}\r\n                </NavLink>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Card);","import React, { memo, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { setSearch, requestSearchTracks, requestMoreSearchTracks } from '../../store/searchTracksListReducer';\r\nimport { RootState } from '../../store/store';\r\nimport Card from '../Card/Card';\r\nimport s from './SearchTracksList.module.scss'\r\n\r\nconst SearchTracksList: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    let topTracks = useSelector((state: RootState) => state.searchTracksList.tracks)\r\n    let nexPageTopTracks = useSelector((state: RootState) => state.searchTracksList.nextPage)\r\n    let isLoading = useSelector((state: RootState) => state.searchTracksList.isLoading)\r\n    let searchValue = useSelector((state: RootState) => state.searchTracksList.searchValue)\r\n    let searchSubmit = useSelector((state: RootState) => state.searchTracksList.searchSubmit)\r\n    let history = useHistory()\r\n    let params = useParams<{ searchValue?: string }>()\r\n\r\n    useEffect(() => { // if url '/search/...' changes\r\n        if (params.searchValue) {\r\n            dispatch(setSearch(params.searchValue))\r\n            dispatch(requestSearchTracks(params.searchValue))\r\n        }\r\n    }, [history.location])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', showMoreSearchTracks)\r\n\r\n        return () => {\r\n            window.removeEventListener('scroll', showMoreSearchTracks)\r\n        }\r\n    }, [nexPageTopTracks, isLoading])\r\n\r\n    const showMoreSearchTracks = useCallback(() => { // tracks are added when scrolling ( because API pagination is broken )\r\n        if (window.pageYOffset > (document.documentElement.scrollHeight - document.documentElement.clientHeight - 50) && !isLoading && nexPageTopTracks > 1) {\r\n            dispatch(requestMoreSearchTracks(searchSubmit, nexPageTopTracks));\r\n        }\r\n    }, [isLoading, nexPageTopTracks, searchSubmit])\r\n\r\n    const searchLink = useCallback((e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault()\r\n        if (searchValue) {\r\n            history.push(`/search/${searchValue}`);\r\n        } else {\r\n            history.push('/');\r\n        }\r\n    }, [searchValue])\r\n\r\n    // I use key={id} because track.name, track.artist.name, track.mbid are repeated\r\n\r\n    return (\r\n        <>\r\n            <div className={s.fixed}>\r\n                <form className={s.SearchForm} onSubmit={searchLink}>\r\n                    <input\r\n                        onChange={(e) => dispatch(setSearch(e.target.value))}\r\n                        type=\"text\"\r\n                        value={searchValue}\r\n                        placeholder='Search tracks...' />\r\n                    <button type=\"submit\" />\r\n                </form>\r\n            </div>\r\n\r\n            {topTracks.length === 0 &&\r\n                <div className={s.TracksNotFound}>\r\n                    <span>Tracks Not Found</span>\r\n                </div>\r\n            }\r\n\r\n            <div className={s.List}>\r\n                {topTracks.map((track, id) =>\r\n                    <Card key={id} name={track.name} artistName={track.artist} />\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default memo(SearchTracksList);","import { ThunkAction } from 'redux-thunk';\r\nimport { topTrackType } from '../types/types';\r\nimport API from '../API/API';\r\nimport { RootState } from './store';\r\n\r\nconst initialState = {\r\n    tracks: [] as topTrackType[],\r\n    nextPage: 1,\r\n    isLoading: false\r\n};\r\n\r\ntype stateType = typeof initialState\r\ntype actionsTypes = ReturnType<typeof setTopTracks> | ReturnType<typeof changeIsLoading> |  ReturnType<typeof addMoreTopTracks>\r\n\r\nconst topTracksListReducer = (state = initialState, action: actionsTypes): stateType => {\r\n    switch (action.type) {\r\n        case 'topTracksList/SET_TOP_TRACKS':\r\n            return {\r\n                ...state,\r\n                tracks: action.payload,\r\n                nextPage: action.payload.length > 0 ? ++state.nextPage : 1 // becasue API pagination is broken\r\n            };\r\n        case 'topTracksList/ADD_MORE_TOP_TRACKS':\r\n            return {\r\n                ...state,\r\n                tracks: [...state.tracks, ...action.payload],\r\n                nextPage: action.payload.length > 0 ? ++state.nextPage : 1 // becasue API pagination is broken\r\n            };\r\n        case 'topTracksList/CHANGE_IS_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default topTracksListReducer;\r\nconst setTopTracks = (data: topTrackType[]) => ({ type: 'topTracksList/SET_TOP_TRACKS', payload: data } as const);\r\nconst addMoreTopTracks = (data: topTrackType[]) => ({ type: 'topTracksList/ADD_MORE_TOP_TRACKS', payload: data } as const);\r\nconst changeIsLoading = (isLoading: boolean) => ({ type: 'topTracksList/CHANGE_IS_LOADING', isLoading } as const);\r\n\r\n\r\nexport const requestTopTracks = (): ThunkAction<void, RootState, unknown, actionsTypes> => {\r\n    return async (dispatch) => {\r\n        dispatch(changeIsLoading(true))\r\n        let response = await API.getTopTracks();\r\n            dispatch(setTopTracks(response))\r\n            dispatch(changeIsLoading(false))\r\n    }\r\n};\r\n\r\nexport const requestMoreTopTracks = (next: number): ThunkAction<void, RootState, unknown, actionsTypes> => {\r\n    return async (dispatch) => {\r\n        dispatch(changeIsLoading(true))\r\n        let response = await API.getMoreTopTracks(next);\r\n            dispatch(addMoreTopTracks(response))\r\n            dispatch(changeIsLoading(false))\r\n    }\r\n};","import React, { memo, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/store';\r\nimport { requestMoreTopTracks, requestTopTracks } from '../../store/topTracksListReducer';\r\nimport Card from '../Card/Card';\r\nimport s from './TopTracksList.module.scss'\r\n\r\nconst TopTracksList: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    let topTracks = useSelector((state: RootState) => state.topTracksList.tracks)\r\n    let nexPageTopTracksList = useSelector((state: RootState) => state.topTracksList.nextPage)\r\n    let isLoading = useSelector((state: RootState) => state.topTracksList.isLoading)\r\n\r\n    useEffect(() => {\r\n        if (topTracks.length === 0) { // if url changes, save array of topTracks in state\r\n            dispatch(requestTopTracks())\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', showMoreTopTracks)\r\n\r\n        return () => {\r\n            window.removeEventListener('scroll', showMoreTopTracks)\r\n        }\r\n    }, [nexPageTopTracksList, isLoading])\r\n\r\n    const showMoreTopTracks = useCallback(() => { // tracks are added when scrolling ( because API pagination is broken )\r\n        if (window.pageYOffset > (document.documentElement.scrollHeight - document.documentElement.clientHeight - 50) && !isLoading && nexPageTopTracksList > 1) {\r\n            dispatch(requestMoreTopTracks(nexPageTopTracksList));\r\n        }\r\n    }, [isLoading, nexPageTopTracksList])\r\n\r\n    // I use key={id} because track.name, track.artist.name, track.mbid are repeated\r\n\r\n    return (\r\n        <div className={s.List}>\r\n            {topTracks.map((track, id) => \r\n                <Card key={id} img={track.image[1]['#text']} name={track.name} artistName={track.artist.name} />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(TopTracksList);","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport './App.scss';\nimport ArtistPage from './components/ArtistPage/ArtistPage';\nimport Header from './components/Header/Header';\nimport SearchTracksList from './components/SearchTracksList/SearchTracksList';\nimport TopTracksList from './components/TopTracksList/TopTracksList';\n\nconst Main = <>\n    <Header />\n    <TopTracksList />\n</>\n\nconst Search = <>\n    <Header />\n    <SearchTracksList />\n</>\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Switch>\n                <Route exact path='/' render={() => Main } />\n                <Route path='/artist/:artistName' render={() => <ArtistPage /> } />\n                <Route path='/search/:searchValue?' render={() => Search } />\n                <Route path='*' render={() => <Redirect to='/' />} />\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, createStore, combineReducers, compose } from 'redux';\r\nimport thunkMiddleWare from 'redux-thunk';\r\nimport artistPageReducer from './artistPageReducer';\r\nimport searchTracksListReducer from './searchTracksListReducer';\r\nimport topTracksListReducer from './topTracksListReducer';\r\n\r\nconst reducers = combineReducers({\r\n    topTracksList: topTracksListReducer,\r\n    searchTracksList: searchTracksListReducer,\r\n    artistPage: artistPageReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // ReduxDevTools for Chrome\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleWare)))\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}